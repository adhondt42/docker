### Mywiki Docker ### 

    #####################
### INSTALL             ###
    #####################

    brew install Docker
    brew install docker-machine
    test: docker run hello-world

    #####################
### DOCKER_MACHINE      ### 
    #####################

    docker-machine  create -d <driver (virtualbox?)> <machine_name>
                    ssh <vm> "cmd"
                    stop <vm>
                    start <vm>
                    rm <vm>

    # Assign ENV to docker-machine 
    eval "$(docker-machine env <machine_name>)"


    #####################
### USE DOCKER          ###
    #####################

    docker run (-d background mode) 
            --name      <name>
            --restart   (no/on-failure/unless-stopped/always)
            --rm        Delete when shell stop
            -i          Keep STDIN open event if not attached (?!)
            -t          allocate a pseudo TTY (go with -i)
            -p          <localport>:<container port>        // Set up listening port
            --mount     <my_volume>:<container_vol_dest>    // Set up Volume
            --link      <container_name><container_alias>   //add link to another container 
            --network="netname" : Connect to specified "netname" network
    docker  update [--name, ...] <container_name>

    docker container ls --all    : All even stopped
                        -q       : quiet mode 


    docker container    attach <id/name> (acces to container)
                        start <>
                        stop <>
    CTRL+P CTRL+Q : Leave container properly if avalaible  


    docker logs <options> <container>
                -f      continue log
                ... : https://docs.docker.com/v17.12/engine/reference/commandline/logs/#description


    #####################
### SWARM MANAGEMENT    ###
    #####################

    docker-machine ssh <v1> "docker swarm init --advertise-addr <vm1_ip>"           # init the VM as swarm Manager 
                            "docker swarm join-token -q worker"                     # View join token
                            "docker node ls"                                        # List the nodes in your swarm

        
    docker-machine ssh <v2> "docker swarm join --token <token_v1> <v1_ip>:2377"     # Define a swarm as 
    #                                                                               #Always run docker swarm init and docker swarm join with port 2377 (the swarm management port), or no port at all and let it take the default.
    #                                                                               #The machine IP addresses returned by docker-machine ls include port 2376, which is the Docker daemon port. Do not use this port 
    #
    #                       "docker swarm leave (-f)"                                    # -f: Make master leave, kill swarm                                  # Make the worker leave the swarm

    #src: https://docs.docker.com/get-started/part4/#recap-and-cheat-sheet-optional


    #####################
### NETWORK             ###
    #####################  

    3 main networks type:
        Bridge  : (default) Used when your applications run in standalone containers that need to communicate.
        Overlay : Connect multiple Docker daemons and hosts together and enable swarm services to communicate with each other.
        host    : Remove network isolation between the container and the Docker host, and use the hostâ€™s networking directly. 
    When you launch a new container automatically connects to this bridge default network (docker0). You cannot remove this default bridge network
    docker network create -d (Bridge..) <name>

    #src: https://docs.docker.com/network/#network-drivers

    #####################
### IMAGES              ### 
    #####################

    docker image ls
        List images 
    docker build -t <nameofimage> <path>

    Share images 
    docker login
    docker tag image username/repository:tag

    #####################
### DOCKER SERVICES     ### 
    #####################


    #todo

    ###########################
### MEMORY (vol/bind/tmps)  ###
    ####################

    Filesystem : Follow the container's Fs architecture
    Volume : Inside container, Managed by Docker / easy to share using Docker CLI
    tmpfs mount : tmp files erased when containers stopped - Only on Linux, not shareable data

    ### VOLUMES             ###

        docker volume   create <my-vol_name>
                        ls
                        inspect <my-vol> (go {{mounts}})
                        rm <my-vol>
            #Must be insered on "$>docker run ..." else, be McGyver :
                #docker commit <container_without_vol_id> <newimage>
                # build newimage with volume

    #####################
###     ERRORS          ###
    #####################

    docker: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?
        installer docker.app ou passer par docker-machine 