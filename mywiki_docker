### Mywiki Docker ### 

    #####################
### INSTALL             ###
    #####################

    brew install Docker
    brew install docker-machine
    test: docker run hello-world

    #####################
    #####################
### DOCKERFILE 			###
    #####################

	src <3 : https://docs.docker.com/engine/reference/builder/
	best pratice : https://docs.docker.com/develop/develop-images/dockerfile_best-practices/

	Intrustions (by order) :
		ARG (optionnal) VERSION=latest					# Specifies args
		ARG XX_XX										# when runin --build arg XX_XX=<value>

		FROM ubuntu:${VERSION} 							# Specifie the base image - May only be preceded by ARG arguments.

		RUN 											# During build time, committed 
			<cmd>										## Shell form
			["executable", "ar1", "ar2"]				## exec form

		CMD 											# After build time, not committed. Run on each run. Then, If ENTRYPOINT or during "docker run ...", CMD got interaction rules... cf. entrypoint 
			... same as run ...

		LABEL <key>=<value> ...							# adds metadata to an image. A LABEL is a key-value pair

		EXPOSE 80 (/TCP ~ /UDP)							# Specify port exposed (ex:docker run -p 80:80/tcp -p 80:80/udp ...)

		ENV <key>=<value> ...		

		ADD hom* /mydir/        						# adds all files starting with "hom"
		ADD hom?.txt /mydir/    						# ? is replaced with any single character, e.g., "home.txt"
														#!# path must b inside the context (!(../x/y/))
														#!# If the <src> parameter of ADD is an archive in a recognised compression format, it will be uncompressed
														#!# If <src> is a URL and <dest> does end with '/', filename = <dest>/<filename> 
														#!# If multiple <src> resources are specified, either directly or due to the use of a wildcard, then <dest> must be a directory, and it must end with a slash /. 

		COPY 											# Same as copy, but keep .tar compressed, doesn't allow URL.
														# Best pratice suggest use COPY /!\											

		ENTRYPOINT

		VOLUME

		USER 

		WORKDIR <pah/to/workdir>						# Change the container's current working directory

		ONBUILD

		STOPSIGNAL

		HEALTCHECK

		SHELL


    #####################
### DOCKER_MACHINE      ### 
    #####################

    docker-machine  create -d <driver (virtualbox?)> <machine_name>
                    ssh <vm> "cmd"
                    stop <vm>
                    start <vm>
                    rm <vm>

    # Assign ENV to docker-machine 
    eval "$(docker-machine env <machine_name>)"


    #####################
### USE DOCKER          ###
    #####################

    docker exec (-it) <name> (+bash: run bash session)  Run a command in a running container
    docker attach                                       Attach fd 0,1,2 to container 



    docker run (-d background mode) 
            --name      <name>
            --restart   (no/on-failure/unless-stopped/always)
            --rm        Delete when shell stop
            -i          Keep STDIN open event if not attached (?!)
            -t          allocate a pseudo TTY (go with -i)
            -p          <localport>:<container port>        // Set up listening port
            --mount     <my_volume>:<container_vol_dest>    // Set up Volume
            --link      <container_name><container_alias>   //add link to another container 
            --network="netname" : Connect to specified "netname" network


    docker  update [--name, ...] <container_name>

    docker container ls --all    : All even stopped
                        -q       : quiet mode 


    docker container    attach <id/name> (acces to container)
                        start <>
                        stop <>

    CTRL+P CTRL+Q : Leave container properly if avalaible  


    docker logs <options> <container>
                -f      continue log
                ... : https://docs.docker.com/v17.12/engine/reference/commandline/logs/#description


    #####################
### SWARM MANAGEMENT    ###
    #####################

    docker-machine ssh <v1> "docker swarm init --advertise-addr <vm1_ip>"           # init the VM as swarm Manager 
                            "docker swarm join-token -q worker"                     # View join token
                            "docker node ls"                                        # List the nodes in your swarm

        
    docker-machine ssh <v2> "docker swarm join --token <token_v1> <v1_ip>:2377"     # Define a swarm as 
    #                                                                               #Always run docker swarm init and docker swarm join with port 2377 (the swarm management port), or no port at all and let it take the default.
    #                                                                               #The machine IP addresses returned by docker-machine ls include port 2376, which is the Docker daemon port. Do not use this port 
    #
    #                       "docker swarm leave (-f)"                                    # -f: Make master leave, kill swarm                                  # Make the worker leave the swarm

    #src: https://docs.docker.com/get-started/part4/#recap-and-cheat-sheet-optional


    #####################
### NETWORK             ###
    #####################  

    3 main networks type:
        Bridge  : (default) Used when your applications run in standalone containers that need to communicate.
        Overlay : Connect multiple Docker daemons and hosts together and enable swarm services to communicate with each other.
        host    : Remove network isolation between the container and the Docker host, and use the hostâ€™s networking directly. 
    When you launch a new container automatically connects to this bridge default network (docker0). You cannot remove this default bridge network
    docker network create -d (Bridge..) <name>

    #src: https://docs.docker.com/network/#network-drivers

    #####################
### IMAGES              ### 
    #####################

    docker image ls
        List images 
    docker build -t <nameofimage> <path>

    Share images 
    docker login
    docker tag image username/repository:tag

    #####################
### DOCKER SERVICES     ### 
    #####################


    #todo

    ###########################
### MEMORY (vol/bind/tmps)  ###
    ####################

    Filesystem : Follow the container's Fs architecture
    Volume : Inside container, Managed by Docker / easy to share using Docker CLI
    tmpfs mount : tmp files erased when containers stopped - Only on Linux, not shareable data

    ### VOLUMES             ###

        docker volume   create <my-vol_name>
                        ls
                        inspect <my-vol> (go {{mounts}})
                        rm <my-vol>
            #Must be insered on "$>docker run ..." else, be McGyver :
                #docker commit <container_without_vol_id> <newimage>
                # build newimage with volume

    #####################
### TODO : Docker multi-stage ### 
    #####################

    To secure some data during instance initilization 

    #####################
###     ERRORS          ###
    #####################

    docker: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?
        installer docker.app ou passer par docker-machine 